Last login: Tue Mar  4 12:10:07 on ttys000
dhananjay_survase_@Dhananjays-MacBook-Air ~ % mysql -u root -p

Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 9.2.0 Homebrew

Copyright (c) 2000, 2025, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> CREATE DATABASE ecom_analytics;
Query OK, 1 row affected (0.03 sec)

mysql> USE ecom_analytics;
Database changed
mysql> CREATE TABLE Products (
    ->     product_id INT AUTO_INCREMENT PRIMARY KEY,
    ->     name VARCHAR(255) NOT NULL,
    ->     category VARCHAR(100),
    ->     price DECIMAL(10,2) NOT NULL,
    ->     stock_quantity INT NOT NULL
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE Customers (
    ->     customer_id INT AUTO_INCREMENT PRIMARY KEY,
    ->     first_name VARCHAR(100) NOT NULL,
    ->     last_name VARCHAR(100) NOT NULL,
    ->     email VARCHAR(255) UNIQUE NOT NULL,
    ->     registration_date DATE NOT NULL
    -> );
Query OK, 0 rows affected (0.01 sec)

mysql> CREATE TABLE Orders (
    ->     order_id INT AUTO_INCREMENT PRIMARY KEY,
    ->     customer_id INT,
    ->     order_date DATETIME NOT NULL,
    ->     status ENUM('pending', 'shipped', 'delivered', 'canceled') NOT NULL,
    ->     FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE Order_Items (
    ->     order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    ->     order_id INT,
    ->     product_id INT,
    ->     quantity INT NOT NULL,
    ->     total_price DECIMAL(10,2) NOT NULL,
    ->     FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    ->     FOREIGN KEY (product_id) REFERENCES Products(product_id)
    -> );
Query OK, 0 rows affected (0.01 sec)

mysql> CREATE TABLE Payments (
    ->     payment_id INT AUTO_INCREMENT PRIMARY KEY,
    ->     order_id INT,
    ->     payment_date DATETIME NOT NULL,
    ->     amount DECIMAL(10,2) NOT NULL,
    ->     payment_method ENUM('credit_card', 'paypal', 'bank_transfer') NOT NULL,
    ->     FOREIGN KEY (order_id) REFERENCES Orders(order_id)
    -> );
Query OK, 0 rows affected (0.02 sec)

mysql> INSERT INTO Products (name, category, price, stock_quantity) VALUES
    -> ('Laptop', 'Electronics', 75000.00, 50),
    -> ('Smartphone', 'Electronics', 50000.00, 30),
    -> ('Headphones', 'Accessories', 2500.00, 100);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> 
mysql> INSERT INTO Customers (first_name, last_name, email, registration_date) VALUES
    -> ('John', 'Doe', 'john@example.com', '2023-05-10'),
    -> ('Alice', 'Smith', 'alice@example.com', '2022-11-22');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> 
mysql> INSERT INTO Orders (customer_id, order_date, status) VALUES
    -> (1, '2024-03-01 10:30:00', 'shipped'),
    -> (2, '2024-02-15 12:45:00', 'delivered');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> 
mysql> INSERT INTO Order_Items (order_id, product_id, quantity, total_price) VALUES
    -> (1, 1, 1, 75000.00),
    -> (1, 3, 2, 5000.00),
    -> (2, 2, 1, 50000.00);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> 
mysql> INSERT INTO Payments (order_id, payment_date, amount, payment_method) VALUES
    -> (1, '2024-03-01 11:00:00', 80000.00, 'credit_card'),
    -> (2, '2024-02-15 13:00:00', 50000.00, 'paypal');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> SELECT p.name, SUM(oi.quantity) AS total_sold
    -> FROM Order_Items oi
    -> JOIN Products p ON oi.product_id = p.product_id
    -> GROUP BY p.product_id
    -> ORDER BY total_sold DESC
    -> LIMIT 5;
+------------+------------+
| name       | total_sold |
+------------+------------+
| Headphones |          2 |
| Laptop     |          1 |
| Smartphone |          1 |
+------------+------------+
3 rows in set (0.00 sec)

mysql> SELECT SUM(amount) AS total_revenue
    -> FROM Payments
    -> WHERE payment_date >= DATE_SUB(NOW(), INTERVAL 6 MONTH);
+---------------+
| total_revenue |
+---------------+
|          NULL |
+---------------+
1 row in set (0.00 sec)

mysql> SELECT c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) AS total_orders
    -> FROM Customers c
    -> JOIN Orders o ON c.customer_id = o.customer_id
    -> GROUP BY c.customer_id
    -> HAVING total_orders > 10;
Empty set (0.00 sec)

mysql> SELECT p.product_id, p.name
    -> FROM Products p
    -> LEFT JOIN Order_Items oi ON p.product_id = oi.product_id
    -> WHERE oi.order_item_id IS NULL;
Empty set (0.00 sec)

mysql> SELECT c.customer_id, c.first_name, c.last_name, 
    ->        AVG(o_total.total_value) AS avg_order_value
    -> FROM Customers c
    -> JOIN (SELECT o.customer_id, SUM(oi.total_price) AS total_value
    ->       FROM Orders o
    ->       JOIN Order_Items oi ON o.order_id = oi.order_id
    ->       GROUP BY o.order_id) o_total
    -> ON c.customer_id = o_total.customer_id
    -> GROUP BY c.customer_id;
+-------------+------------+-----------+-----------------+
| customer_id | first_name | last_name | avg_order_value |
+-------------+------------+-----------+-----------------+
|           1 | John       | Doe       |    80000.000000 |
|           2 | Alice      | Smith     |    50000.000000 |
+-------------+------------+-----------+-----------------+
2 rows in set (0.01 sec)

mysql> SELECT DATE_FORMAT(order_date, '%Y-%m') AS order_month, SUM(oi.total_price) AS total_sales
    -> FROM Orders o
    -> JOIN Order_Items oi ON o.order_id = oi.order_id
    -> WHERE order_date >= DATE_SUB(NOW(), INTERVAL 2 YEAR)
    -> GROUP BY order_month
    -> ORDER BY total_sales DESC
    -> LIMIT 1;
+-------------+-------------+
| order_month | total_sales |
+-------------+-------------+
| 2024-03     |    80000.00 |
+-------------+-------------+
1 row in set (0.00 sec)

mysql> SELECT c.customer_id, c.first_name, c.last_name
    -> FROM Customers c
    -> LEFT JOIN Orders o ON c.customer_id = o.customer_id
    -> AND o.order_date >= DATE_SUB(NOW(), INTERVAL 12 MONTH)
    -> WHERE o.order_id IS NULL;
+-------------+------------+-----------+
| customer_id | first_name | last_name |
+-------------+------------+-----------+
|           1 | John       | Doe       |
|           2 | Alice      | Smith     |
+-------------+------------+-----------+
2 rows in set (0.00 sec)

mysql> SELECT payment_method, COUNT(payment_id) AS usage_count
    -> FROM Payments
    -> GROUP BY payment_method
    -> ORDER BY usage_count DESC
    -> LIMIT 1;
+----------------+-------------+
| payment_method | usage_count |
+----------------+-------------+
| credit_card    |           1 |
+----------------+-------------+
1 row in set (0.00 sec)

mysql> DELIMITER //
mysql> CREATE PROCEDURE UpdateStock(IN order_id INT)
    -> BEGIN
    ->     UPDATE Products p
    ->     JOIN Order_Items oi ON p.product_id = oi.product_id
    ->     SET p.stock_quantity = p.stock_quantity - oi.quantity
    ->     WHERE oi.order_id = order_id;
    -> END //
Query OK, 0 rows affected (0.01 sec)

mysql> DELIMITER ;
mysql> CALL UpdateStock(1);
Query OK, 2 rows affected (0.01 sec)

mysql> DELIMITER //
mysql> CREATE TRIGGER CancelOrderOnPaymentFailure
    -> AFTER INSERT ON Payments
    -> FOR EACH ROW
    -> BEGIN
    ->     IF NEW.amount <= 0 THEN
    ->         UPDATE Orders SET status = 'canceled' WHERE order_id = NEW.order_id;
    ->     END IF;
    -> END //
Query OK, 0 rows affected (0.01 sec)

mysql> DELIMITER ;
mysql> CREATE VIEW CustomerPurchaseHistory AS
    -> SELECT c.customer_id, c.first_name, c.last_name, o.order_id, o.order_date, p.name AS product_name, oi.quantity, oi.total_price
    -> FROM Customers c
    -> JOIN Orders o ON c.customer_id = o.customer_id
    -> JOIN Order_Items oi ON o.order_id = oi.order_id
    -> JOIN Products p ON oi.product_id = p.product_id;
Query OK, 0 rows affected (0.01 sec)

mysql> CREATE INDEX idx_order_date ON Orders(order_date);
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_product_category ON Products(category);
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_customer_email ON Customers(email);
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_payment_method ON Payments(payment_method);
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> 
